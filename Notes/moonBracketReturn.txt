Using brackets around the return value is valid JavaScript, but 
mostly a bad thing to do. Mostly bad because it doesn't add anything yet increases the size of the JavaScript which means that there is more to download to the browser.



Yes, you can return JSX using parentheses () in JavaScript, especially within the context of React components and arrow functions.
Returning JSX with Parentheses:
When returning multi-line JSX from a function, particularly in arrow functions or when assigning JSX to a variable, wrapping the JSX in parentheses () is a common and recommended practice. This is because JavaScript's Automatic Semicolon Insertion (ASI) can sometimes misinterpret a line break after a return keyword, leading to unexpected behavior if the JSX is not enclosed. The parentheses explicitly indicate that the multi-line content is part of the expression being returned.
JavaScript

// Example with an arrow function and implicit return
const MyComponent = () => (
  <div>
    <h1>Hello, React!</h1>
    <p>This is a multi-line JSX expression.</p>
  </div>
);

// Example with explicit return and parentheses
function AnotherComponent() {
  return (
    <section>
      <h2>Another Section</h2>
      <span>Some content here.</span>
    </section>
  );
}
Returning JSX with Curly Braces {}:
Curly braces {} in JSX are used to embed JavaScript expressions within the JSX markup. They are not used to enclose the entire return value of a function in the same way parentheses are for multi-line returns.
JavaScript

const name = "Alice";
const greeting = (
  <div>
    Hello, {name}! {/* Curly braces embed the 'name' variable */}
  </div>
);
In summary:
Parentheses ()
are used to wrap multi-line JSX when it is the direct return value of a function or assigned to a variable, primarily to prevent issues with Automatic Semicolon Insertion.
Curly braces {}
are used inside JSX to embed JavaScript expressions, such as variables, function calls, or conditional rendering logic.